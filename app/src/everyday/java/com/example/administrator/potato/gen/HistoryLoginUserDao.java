package com.example.administrator.potato.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.potato.greendaobeen.HistoryLoginUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_LOGIN_USER".
*/
public class HistoryLoginUserDao extends AbstractDao<HistoryLoginUser, String> {

    public static final String TABLENAME = "HISTORY_LOGIN_USER";

    /**
     * Properties of entity HistoryLoginUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Account = new Property(1, String.class, "account", true, "ACCOUNT");
        public final static Property Introduce = new Property(2, String.class, "introduce", false, "INTRODUCE");
        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property LoginDate = new Property(5, long.class, "loginDate", false, "LOGIN_DATE");
    }


    public HistoryLoginUserDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryLoginUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_LOGIN_USER\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"ACCOUNT\" TEXT PRIMARY KEY NOT NULL ," + // 1: account
                "\"INTRODUCE\" TEXT," + // 2: introduce
                "\"NICK_NAME\" TEXT," + // 3: nickName
                "\"PASSWORD\" TEXT," + // 4: password
                "\"LOGIN_DATE\" INTEGER NOT NULL );"); // 5: loginDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_LOGIN_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryLoginUser entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(3, introduce);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
        stmt.bindLong(6, entity.getLoginDate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryLoginUser entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(3, introduce);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
        stmt.bindLong(6, entity.getLoginDate());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public HistoryLoginUser readEntity(Cursor cursor, int offset) {
        HistoryLoginUser entity = new HistoryLoginUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // introduce
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.getLong(offset + 5) // loginDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryLoginUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIntroduce(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLoginDate(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HistoryLoginUser entity, long rowId) {
        return entity.getAccount();
    }
    
    @Override
    public String getKey(HistoryLoginUser entity) {
        if(entity != null) {
            return entity.getAccount();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryLoginUser entity) {
        return entity.getAccount() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
